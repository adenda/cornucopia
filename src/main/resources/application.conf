akka {

  test.timefactor = 1

  actor {
    migrate-slots-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 20
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 200
      }
    }

    deployment {
      /redisCommandRouter/migrationRouter {
        router = balancing-pool
        nr-of-instances = 1
        pool-dispatcher {
          executor = "thread-pool-executor"

          # allocate exactly 5 threads for this pool
          thread-pool-executor {
            core-pool-size-min = 1
            core-pool-size-max = 1
          }
        }
      }
    }

  }

}

cornucopia {
  // Time (seconds) to wait for cluster topology changes to propagate.
  refresh.timeout = 5

  http {
    host = "localhost"
    port = "9001"
  }

  join.node {
    max.retries = 5
    refresh.timeout = 5
  }

  reshard.cluster.max.retries = 5

  cluster {
    connections.max.retries = 5

    ready {
      max.retries = 5
      backoff.time = 2
    }
  }

  cluster.topology.max.retries = 5

  migrate.slots {
    max.retries = 5
    workers = 20
  }

  replicate.poorest.master.max.retries = 5

  failover {
    max.retries = 10
    max.attempts.to.verify = 3
    verification.retry.backoff.time = 1
    refresh.timeout = 15
  }

  get.slaves.of.master {
    max.retries = 2
  }

  forget.redis.nodes {
    max.retries = 5
    refresh.timeout = 10
  }

}

redis {
    cluster {
      // Initial node-hostname from which the full cluster topology will be derived.
      // This node must not be removed during operation of cornucopia.
      // Just one node because undefined behaviour occurs when you list nodes that are in disjoint cluster partitions.
      // Instead of failover capability, you end up with multiple points of failure.
      // Specifying multiple hosts is useful for an application but when building cluster it can be very messy.
      seed.server.host = "localhost"
      seed.server.port = 7000
    }
}