akka {
  actor {
    resharding-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 20
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 200
      }
    }

    deployment {
      /redisCommandRouter/migrationRouter {
        router = balancing-pool
        nr-of-instances = 5
        pool-dispatcher {
          executor = "thread-pool-executor"

          # allocate exactly 5 threads for this pool
          thread-pool-executor {
            core-pool-size-min = 5
            core-pool-size-max = 5
          }
        }
      }
    }

  }

}

cornucopia {

  // Time (seconds) to wait for cluster topology changes to propagate.
  refresh.timeout = 5

  // Time (seconds) to wait for batches to accumulate before executing a job.
  batch.period = 5

  http {
    host = "localhost"
    port = "9001"
  }

  reshard {
    // Mininum time (seconds) to wait between reshard events.
    interval = 60

    // the cluster must be resharded within this timeout in seconds, or else it fails
    timeout = 300

    // Each slot migration must complete before this time in seconds has elapsed
    migrate.slot.timeout = 60
  }
}

redis {
    cluster {
      // Initial node-hostname from which the full cluster topology will be derived.
      // This node must not be removed during operation of cornucopia.
      // Just one node because undefined behaviour occurs when you list nodes that are in disjoint cluster partitions.
      // Instead of failover capability, you end up with multiple points of failure.
      // Specifying multiple hosts is useful for an application but when building cluster it can be very messy.
      seed.server.host = "localhost"
      seed.server.port = 7000
    }
}